#lang racket

(struct point (x y) #:inspector #f)

(define (sierpinski n canvas)
  (if (zero? n)
      (get-init)
      (let ([(canvas top left right) (sierpinski (sub1 n))])
        (draw-triangle* canvas top left-bottom right-bottom)
        )))

(define (get-init)
  (let ([canvas (for/vector ([x 32])
                  (for/vector ([y 63])
                    #\_))]
        [top (point 0 31)]
        [left (point 31 0)]
        [right (point 31 62)])
    (values (draw-triangle canvas top left right #\1)
            top left right)))

;; /\
;; @param canvas::vector[char]
;; @paran x::point top
;; @param y::point left-bottom
;; @param z::point right-bottom
;; @param c::char char
(define (draw-triangle canvas top left right c)
  (for* ([i (range (point-x top) (add1 (point-x left)))]
         [j (range (- (point-y top) i) (add1 (+ (point-y top) i)))])
    (vector-set! (vector-ref canvas i) j c))
  canvas)

;; \/
(define (draw-triangle* canvas left right bottom c)
  (for* ([i (range (point-x left) (add1 (point-x bottom)))]
         [j (range (+ (point-y left) i) (add1 (- (point-y right) i)))])
    (displayln "foo")
    (vector-set! (vector-ref canvas i) j c))
  canvas)

(define (pp-canvas canvas)
  (map (lambda (v) (list->string (vector->list v)))
       (vector->list canvas)))

;; main
;(define n (read))
(let-values ([(canvas top left right) (sierpinski 0)])
  (for-each displayln (pp-canvas canvas)))
;(for-each displayln (pp-canvas (sierpinski 0)))
;(for-each displayln (pp-canvas (draw-triangle* (get-init) (point 0 2) (point 2 0) (point 2 4) #\a)))
;(draw-triangle *canvas* (point 0 2) (point 2 0) (point 2 4) #\a)
;(draw-triangle* *canvas* (point 0 0) (point 0 4) (point 2 2) #\a)
