#lang racket

(define (qsort vec start end)
  (let ([pivotv (vector-ref vec end)]
        [great start])
    (for-each (lambda (x)
                (let ([v (vector-ref vec x)])
                  (when (<= v pivotv)
                    (swap vec x great)
                    (set! great (+ great 1)))
                  ))
              (range start (+ end 1)))
    (p vec)
    (when (not (eqv? start (- great 2)))
      (qsort vec start (- great 2)))
    (when (not (eqv? great end))
      (qsort vec great end))
    )
  )

(define (p vec)
  (displayln (string-join (map (lambda (x) (number->string x)) (vector->list vec))))
  )

(define (swap vec i j)
  (let ([xi (vector-ref vec i)]
        [xj (vector-ref vec j)])
    (vector-set! vec i xj)
    (vector-set! vec j xi)
    vec))

(define (range n m)
  (if (eqv? n m)
      '()
      (cons n (range (+ n 1) m))))

; main
(define n (string->number (read-line)))
(define ar (map (lambda (e) (string->number e))
                (string-split (read-line) " ")))
(define vec (list->vector ar)) ; return mutable vector
(qsort vec 0 (- (vector-length vec) 1))
