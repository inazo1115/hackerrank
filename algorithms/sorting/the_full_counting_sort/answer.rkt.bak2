#lang racket

(define size (string->number (read-line)))
(define vec (make-vector 100))
(vector-fill! vec "")

(define (process-line! i)
  (let* ([line (string-split (read-line) " ")]
         [num (string->number (car line))]
         [wor (if (< i (/ size 2)) "-" (car (cdr line)))])
    (vector-set! vec num (string-append (vector-ref vec num) " " wor))))

(for-each (lambda (i) (process-line! i))
          (range size))

(displayln (string-trim (string-join (vector->list vec) "") #:left? #t))
